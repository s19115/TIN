<%
lowerCase = function (string) {
    if (typeof string === 'string')
        return string.replace(/\w/, c => c.toLowerCase());
    return string;
}
upperCase = function (string) {
    if (typeof string === 'string')
        return string.replace(/\w/, c => c.toUpperCase());
    return string;
}
desiredProperty = function (field, object) {
    return Object.hasOwnProperty.call(object, field);
}
required = function (field) {
    return !field.allowNull;
}
type = function (string) {
    try {
        if (string === "INTEGER") return "number";
        if (string.includes("DECIMAL")) return "number\" step=\"0.001";
        if (string === "DATE" || string === "DATETIME") return "DATE";
    } catch (e) {

    }
    return "text";
}
filterOut = function (arr) {
    var toBeFiltered = ["_id", "boss_id", "weapon_id", "createdAt", "updatedAt"];
    return arr.filter(item => !toBeFiltered.includes(item));
}
moveLastToFirst = function (arr) {
    // let last = arr[arr.length - 1];
    // arr[arr.length - 1] = arr[0];
    // arr[0] = last;
    return arr;
}
getField = function (field) {

    if (field instanceof Date) return formatDate(field);
    try {
        if (field.hasOwnProperty("dataValues")) return field["dataValues"].name;
    } catch (e) {

    }
    return field;
}
formatDate = function (d) {
    let day=d.getDate();
    if(day<10)day="0"+day;
    let month=d.getDate()+1;
    if(month<10)month="0"+month;
    return  d.getFullYear()+"-"+month.toString()+"-"+day.toString();
}
cutId = function (name) {
    return name.replace('_id', '');
}
checkIfAssociationIsJoinedOn = function (association, dataModel) {
    try {
        return dataModel.associations.joinOn.includes(lowerCase(association.toString() + "_id"));

    } catch (e) {
        return false;
    }
}
%>
