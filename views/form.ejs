<% dataName; dataModel; validationErrors; previousData %>
<%- include('./common/functions.ejs') %>
<% var navLocation, url %>
<% navLocation = url = lowerCase(dataName) %>



<%- include('./fragments/header.ejs', {navLocation: navLocation}) %>
<main>
    <h2>Add new <%= lowerCase(dataName) %></h2>
    <!--  onsubmit="return validateForm()"  -->
    <form class="form" action="" onsubmit="return validateForm()" method="post" novalidate>
        <% for (let column of Object.getOwnPropertyNames(dataModel)){ %>
            <% if(dataModel[column].joinedOn){ %>
                <label for="<%= upperCase(cutId(dataModel[column].name)) + "Name" %>"><%= upperCase(cutId(dataModel[column].name)) + " name" %>
                    <% if(required(dataModel[column])){ %>
                        <sup>*</sup>
                    <% } %>
                </label>
                <select id="<%= upperCase(cutId(dataModel[column].name)) + "Name" %>" name="<%= column %>"
                        class="<%= validationErrors.find(e => e.path.includes(column)) ? 'error-input' : '' %>">
                    <option value="" hidden>Choose here</option>
                    <% for (let name of dataModel["associations"][upperCase(cutId(dataModel[column].name))]) { %>
                        <option value="<%= name["_id"] %>"
                        <% if(name["_id"] == previousData[column]){ %>
                                selected
                                <% } %>

                        ><%= name["name"] %>

                        </option>
                    <% } %>
                </select>
                <span id="error<%= upperCase(column) %>" class="errors-text">
                    <% if (validationErrors.find(e => e.path.includes(column))) { %>
                        <%= validationErrors.find(e => e.path.includes(column)).message %>
                    <% } %>
                </span>

            <% } %>
            <% if(!dataModel[column].hidden && !dataModel[column].grantedValue) { %>
                <label for="<%= upperCase(dataModel[column]["name"]) %>"><%= upperCase(dataModel[column]["name"]) + ":" %>
                    <% if(required(dataModel[column])){ %>
                        <sup>*</sup>
                    <% } %>
                </label>
                <input
                <% if(dataModel[column].hiddenValue) { %>
                    type="password"
                <% }else { %>
                    type="<%- type(dataModel[column].type.toString()) %>"
                        <% } %>
                    name="<%= dataModel[column].name %>"
                    value="<%= getField(previousData[column]) %>"
                    id="<%= upperCase(dataModel[column].name) %>"
                    placeholder="<%= getPlaceHolder(dataModel[column].type) %>"
                    class="<%= validationErrors.find(e => e.path.includes(column)) ? 'error-input' : '' %>">
                <span id="error<%= upperCase(column) %>" class="errors-text">
                    <% if (validationErrors.find(e => e.path.includes(column))) { %>
                        <%= validationErrors.find(e => e.path.includes(column)).message %>
                    <% } %>

                </span>
            <% } %>
        <% } %>
        <div class="form-buttons">
            <p id="errorSummary" class="errors-text">
                <% if (validationErrors.length > 0) { %>
                    Formularz zawiera błędy
                <% } %>
            </p>
            <input type="submit" value="Add" class="form-button-submit">
            <a href="/<%= url %>" class="form-button-cancel">Cancel</a>
        </div>
    </form>

</main>
<%- include('./fragments/footer.ejs') %>